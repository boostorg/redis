/* Copyright (c) 2018-2022 Marcelo Zimbres Silva (mzimbres@gmail.com)
 *
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE.txt)
 */

#include <iostream>
#include <boost/asio.hpp>
#include <boost/redis.hpp>
#include <boost/redis/src.hpp>

namespace net = boost::asio;
using tcp = boost::asio::ip::tcp;
namespace redis = boost::redis;
using boost::redis::generic_response;
using redis::ignore_t;
using redis::operation;
using redis::request;
using redis::response;

void log(boost::system::error_code const& ec, char const* prefix)
{
   std::clog << prefix << ec.message() << std::endl;
}

class redis_client
{
    net::io_context& ioc_;
    tcp::endpoint endpoint_;
    net::ip::tcp::resolver resv_;
    redis::connection conn_;
    std::string redisStreamKey_;

    request req_;
    std::unique_ptr<generic_response> resp_;

    std::string streamId_;
    std::atomic<std::uint64_t> messageCount_;

public:
    redis_client(
        net::io_context& ioc,
        tcp::endpoint endpoint,
        const std::string& redisStreamKey)
        : ioc_(ioc)
        , endpoint_(endpoint)
        , resv_(ioc)
        , conn_(net::make_strand(ioc))
        , redisStreamKey_(redisStreamKey)
        , resp_()
        , req_()
        , streamId_("$")
        , messageCount_()
    {
        resetRequest();
        resetResponse();
    }

    void resolve()
    {
        resv_.async_resolve(
            endpoint_,
            [this](auto ec, auto results) { this->on_resolve(ec, results); });
    }

private:

    void
    on_run(
        boost::system::error_code ec)
    {
        if (ec) {
            return log(ec, "on_run: ");
        }
    }

    void
    on_connect(
        const boost::system::error_code& ec,
        auto ep)
    {
        if (ec) {
            return log(ec, "on_connect: ");
        }

        conn_.async_run([this](auto ec) { this->on_run(ec); });
        do_exec();
    }

    void on_resolve(
        const boost::system::error_code& ec,
        tcp::resolver::results_type results)
    {
        if (ec) {
            return log(ec, "on_resolve: ");
        }

        net::async_connect(
            conn_.next_layer(),
            results,
            [this](auto ec, auto ep) { this->on_connect(ec, ep); });
    }

    void
    do_exec()
    {
        this->resetRequest();

        conn_.async_exec(
            req_,
            *resp_,
            net::bind_executor(
                conn_.get_executor(),
                [this](auto ec, auto size) { this->on_exec(ec, size); }));
    }

    void on_exec(
        boost::system::error_code ec,
        std::size_t responseSize)
    {
        try {
            this->on_exec_internal(ec, responseSize);
        }
        catch (...) {
        }

        do_exec();
    }

    void
    on_exec_internal(
        boost::system::error_code ec,
        std::size_t responseSize)
    {
        static const std::string Response_Field_MyField = "myfield";

        if (ec)
        {
            log(ec, "on_exec: ");
            conn_.cancel(operation::run);
            return;
        }

        if (!resp_->has_value())
        {
            return;
        }

        // std::cout << "Response: ";
        // for (int i = 0; i < resp_->value().size(); ++i) {
        //     std::cout << resp_->value().at(i).value << ", ";
        // }
        // std::cout << std::endl;

        // The following approach was taken in order to be able to deal with the responses,
        //  as generated by redis in the case that there are multiple stream 'records' within a single generic_response.
        //  The nesting and number of values in localResp->value() are different, depending on the contents of the stream in redis.
        //  Uncomment the above commented-out code for examples while running the XADD command.

        auto currentMessageCount = this->messageCount_++;
        auto localResp = this->resetResponse();
        bool atLeastOneParseMessageSucceeded = false;
        std::size_t itemIndex = 0;
        while (itemIndex < localResp->value().size()) {
            const auto& val = localResp->value().at(itemIndex).value;

            if (Response_Field_MyField.compare(val) == 0) {
                // We've hit a myfield field.
                //  The streamId is located at itemIndex - 2
                //  The payload is located at itemIndex + 1
                this->streamId_ = localResp->value().at(itemIndex - 2).value;
                std::cout << "StreamId: " << this->streamId_ << ", MyField: " << localResp->value().at(itemIndex + 1).value << std::endl;
                ++itemIndex; // We can increase so we don't read this again
            }

            ++itemIndex;
        }
    }

    void resetRequest()
    {
        req_.clear();
        req_.push("XREAD", "BLOCK", "0", "STREAMS", this->redisStreamKey_, this->streamId_);
    }

    std::unique_ptr<generic_response> resetResponse()
    {
        auto localResponse = std::make_unique<generic_response>();
        std::swap(
            this->resp_,
            localResponse);
        return localResponse;
    }
};

std::shared_ptr<redis_client> startRedisClient(
    const std::string& ipAddress,
    unsigned short portNumber,
    const std::string& redisStreamKey,
    boost::asio::io_context& ioc)
{
    auto const address = net::ip::make_address(ipAddress);

    auto redisClient = std::make_shared<redis_client>(
        ioc,
        tcp::endpoint{address, portNumber},
        redisStreamKey);
    redisClient->resolve();
    return redisClient;
}

// Run this in another terminal:
//  redis-cli -r 100000 -i 0.0001 XADD "test-topic" "*" "myfield" "myfieldvalue1"
auto main(int argc, char * argv[]) -> int
{
    try {
        std::string redisHost = "127.0.0.1";
        unsigned short redisPort = 6379;
        int threads = 20;
        std::string redisStreamKey = "test-topic";

        if (argc == 5)
        {
            redisHost = argv[1];
            redisPort = static_cast<unsigned short>(std::atoi(argv[2]));
            threads = std::max<int>(1, std::atoi(argv[3]));
            redisStreamKey = argv[4];
        }

        net::io_context ioc;

        std::cout << "Starting redis client on " << redisHost << ":" << redisPort << std::endl;
        auto redisClient = startRedisClient(redisHost, redisPort, redisStreamKey, ioc);

        // Run the I/O service on the requested number of threads
        std::vector<std::thread> v;
        v.reserve(threads - 1);
        for(auto i = threads - 1; i > 0; --i) {
            v.emplace_back(
            [&ioc] {
                ioc.run();
            });
        }
        ioc.run();

        return 0;
    }
    catch (std::exception const &e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 1;
}
